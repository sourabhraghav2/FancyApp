[{"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\index.tsx":"1","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\App.tsx":"2","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\modules\\stores.tsx":"3","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\modules\\actions.tsx":"4","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\LandingPage.tsx":"5","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\menu.tsx":"6","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\landingPage.tsx":"7","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\userLoginForm.tsx":"8","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\createAccount.tsx":"9","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\changeLanguageForm.tsx":"10","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\securityModification.tsx":"11","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\security\\inMemoryJWTManager.tsx":"12","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\common\\constants.tsx":"13","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\util\\HttpUtil.tsx":"14","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\language\\LanguageModel.tsx":"15","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\security\\cookieHelper.tsx":"16","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\service\\Service.tsx":"17"},{"size":299,"mtime":1609761678309,"results":"18","hashOfConfig":"19"},{"size":185,"mtime":1610284442521,"results":"20","hashOfConfig":"19"},{"size":575,"mtime":1609860197061,"results":"21","hashOfConfig":"19"},{"size":280,"mtime":1609771164591,"results":"22","hashOfConfig":"19"},{"size":1547,"mtime":1609754839477,"results":"23","hashOfConfig":"19"},{"size":1321,"mtime":1610207489504,"results":"24","hashOfConfig":"19"},{"size":7548,"mtime":1610284924561,"results":"25","hashOfConfig":"19"},{"size":3007,"mtime":1610283349107,"results":"26","hashOfConfig":"19"},{"size":3301,"mtime":1610284379814,"results":"27","hashOfConfig":"19"},{"size":2810,"mtime":1610209833085,"results":"28","hashOfConfig":"19"},{"size":3521,"mtime":1610283080158,"results":"29","hashOfConfig":"19"},{"size":539,"mtime":1610280889779,"results":"30","hashOfConfig":"19"},{"size":1080,"mtime":1610285177324,"results":"31","hashOfConfig":"19"},{"size":2021,"mtime":1610285198702,"results":"32","hashOfConfig":"19"},{"size":2683,"mtime":1610284971593,"results":"33","hashOfConfig":"19"},{"size":1024,"mtime":1610281088128,"results":"34","hashOfConfig":"19"},{"size":2205,"mtime":1610285252401,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1y9j63k",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\index.tsx",[],["73","74"],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\App.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\modules\\stores.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\modules\\actions.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\LandingPage.tsx",["75","76"],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\menu.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\landingPage.tsx",["77"],"import React , {useState,useEffect} from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport 'components/useraccount/style/landingPage.scss';\r\nimport {changeScreenType} from '../../modules/actions'\r\nimport Menu from './menu';\r\nimport UserLoginForm from './userLoginForm';\r\nimport CreateAccountForm from './createAccount';\r\nimport ChangeLanguageForm from './changeLanguageForm';\r\nimport SecurityModification from './securityModification';\r\nimport { Service } from 'service/Service';\r\nimport { LoginRequest, LoginResponse } from 'model/LoginRequest';\r\nimport inMemoryJWTManager from 'security/inMemoryJWTManager';\r\nimport { EMPTY, LOGIN_FAILED, Privacy, ScreenType } from 'common/constants';\r\nimport { Language } from 'common/constants';\r\n\r\n\r\nimport { CreateAccountRequest, CreateAccountResponse } from 'model/createAccount';\r\nimport { LanguageChangeRequest, LanguageChangeResponse } from 'model/languageModel';\r\nimport { ChangePasswordRequest, ChangePasswordResponse } from 'model/changePassword';\r\nimport Translation from 'language/LanguageModel';\r\n\r\n\r\nexport interface MessageProperties{\r\n  message?:string,\r\n  isError?:boolean\r\n}\r\n\r\nconst LandingPage =(props)=> {\r\n  const service=new Service()\r\n  const millisecondsToWait = 500;\r\n  const [menuShow,setMenuShow] = useState(false);\r\n  const [loginFormButtonLoading,setLoginFormButtonLoading] = useState(false);\r\n  const [loginMessage,setLoginMessage] = useState(EMPTY);\r\n  const [viewModel,setViewModel]=useState(new Translation())\r\n\r\n  const [changePasswordMessage,setChangePasswordMessage]=useState({} as MessageProperties)\r\n  const [changeLanguageMessage,setChangeLanguageMessage]=useState({} as MessageProperties)\r\n  const [createAccountMessage,setCreateAccountMessage]=useState({} as MessageProperties)\r\n\r\n  const [language,setLanguage]=useState(Language.ENGLISH.toString())\r\n  const [privacy,setPrivacy]=useState( Privacy.PRIVATE.toString())\r\n  const [username,setUserName]=useState(EMPTY)\r\n\r\n  \r\n  useEffect(() => {\r\n\r\n    if(inMemoryJWTManager.getToken())\r\n      props.changeScreenType(ScreenType.CHANGE_LANGUAGE_FORM)\r\n    loadLanguage(language)\r\n    \r\n  }, []);\r\n\r\n  const loadLanguage =async (language:string )=>{\r\n    setViewModel(await service.getLanguage(language))\r\n  }\r\n  useEffect(() => {\r\n    if(props.screenType!==ScreenType.LOGIN_FORM && props.screenType!==ScreenType.CREATE_ACCOUNT_FORM)\r\n      setMenuShow(true)\r\n    else \r\n      setMenuShow(false)\r\n  }, [props.screenType]);\r\n\r\n    const leftMenu=()=>{\r\n      return menuShow?\r\n      <Menu \r\n        viewModel={viewModel}\r\n        genaralMenuClickHandler={genaralMenuClickHandler} \r\n        securityMenuClickHandler={securityMenuClickHandler} \r\n        LogoutMenuClickHandler={LogoutMenuClickHandler}\r\n      />:<div></div>\r\n    }\r\n\r\n    \r\n  const loginClickHandler= async (username:string,password:string) =>{\r\n    \r\n    setLoginFormButtonLoading(true)\r\n    const request={username, password} as LoginRequest\r\n    \r\n    const resp:LoginResponse= await service.attemptLogin(request) \r\n    setLoginMessage(EMPTY)\r\n    //just for the api effect\r\n    setTimeout(function() {\r\n      if(resp.isSuccess){\r\n        if (resp.language){\r\n          setLanguage(resp.language)\r\n          loadLanguage(resp.language) \r\n        }\r\n        setUserName(username)\r\n        setPrivacy(resp.privacy)\r\n        props.changeScreenType(ScreenType.CHANGE_LANGUAGE_FORM)\r\n        inMemoryJWTManager.setToken(resp.jwtToken)\r\n\r\n      }else {\r\n        setLoginMessage(LOGIN_FAILED)\r\n      }\r\n      setLoginFormButtonLoading(false)\r\n    }, millisecondsToWait);\r\n  }\r\n  const createAccountClickHandler =async(username:string,password:string)=>{\r\n    const request={username, password} as CreateAccountRequest\r\n    const resp:CreateAccountResponse= await service.createAccount(request) \r\n    if(resp.isSuccess){\r\n      setCreateAccountMessage({\r\n        message:resp.msg,\r\n        isError:!resp.isSuccess\r\n      }as MessageProperties)\r\n      \r\n      setTimeout(function() {\r\n        props.changeScreenType(ScreenType.CHANGE_LANGUAGE_FORM)\r\n        inMemoryJWTManager.setToken(resp.jwtToken)\r\n      }, millisecondsToWait);\r\n    }else {\r\n      setCreateAccountMessage({\r\n        message:resp.msg,\r\n        isError:!resp.isSuccess\r\n      }as MessageProperties)\r\n    }\r\n  }\r\n  \r\n  const genaralMenuClickHandler=()=>{\r\n    props.changeScreenType(ScreenType.CHANGE_LANGUAGE_FORM)\r\n  }\r\n  const securityMenuClickHandler=()=>{\r\n    props.changeScreenType(ScreenType.SECURITY_MODIFICATION)\r\n  \r\n  }\r\n  const LogoutMenuClickHandler=async()=>{\r\n    props.changeScreenType(ScreenType.LOGIN_FORM)\r\n    inMemoryJWTManager.ereaseToken()\r\n    await service.logout() \r\n  }\r\n  const displayCreateAccountHandler=()=>{\r\n    props.changeScreenType(ScreenType.CREATE_ACCOUNT_FORM)\r\n    \r\n  }\r\n  const onSaveClickHandler=async(language:Language,privacy:Privacy)=>{\r\n    setViewModel (new Translation())\r\n    const request={\r\n      language,privacy,username\r\n    } as LanguageChangeRequest\r\n    const resp:LanguageChangeResponse= await service.languageChange(request) \r\n    if(resp.isSuccess){\r\n      setLanguage(language)\r\n      loadLanguage(language)\r\n    }\r\n    setChangeLanguageMessage({\r\n      message:resp.msg,\r\n      isError:!resp.isSuccess\r\n    }as MessageProperties)\r\n  }\r\n  const changePasswordHandler =async(username:string,password:string)=>{\r\n    const request={username, password} as ChangePasswordRequest\r\n    const resp:ChangePasswordResponse= await service.changePassword(request) \r\n\r\n    setChangePasswordMessage({\r\n      message:resp.msg,\r\n      isError:!resp.isSuccess\r\n    }as MessageProperties)\r\n  }\r\n  \r\n  const deleteAccountHandler =async()=>{\r\n    props.changeScreenType(ScreenType.LOGIN_FORM)\r\n    inMemoryJWTManager.ereaseToken()\r\n    await service.delete(username) \r\n  }\r\n  \r\n  \r\n  const containerBody=()=>{\r\n      return (\r\n        <div className=\"container-body\">\r\n          {props.screenType===ScreenType.LOGIN_FORM && \r\n            <UserLoginForm viewModel={viewModel}\r\n              loginClickHandler={loginClickHandler} \r\n              displayCreateAccountHandler={displayCreateAccountHandler}\r\n              loading={loginFormButtonLoading}\r\n              message={loginMessage}\r\n            />\r\n          }\r\n          {props.screenType===ScreenType.CREATE_ACCOUNT_FORM && \r\n            <CreateAccountForm \r\n              viewModel={viewModel}\r\n              createAccountClickHandler={createAccountClickHandler} \r\n              createAccountMessage={createAccountMessage}\r\n            />}\r\n          {props.screenType===ScreenType.CHANGE_LANGUAGE_FORM && \r\n            <ChangeLanguageForm \r\n              viewModel={viewModel}\r\n              onSaveClickHandler={onSaveClickHandler}\r\n              changeLanguageMessage={changeLanguageMessage}\r\n              language={language}\r\n              privacy={privacy}\r\n            />\r\n          }\r\n          {props.screenType===ScreenType.SECURITY_MODIFICATION && \r\n            <SecurityModification  \r\n              viewModel={viewModel}\r\n              deleteAccountHandler={deleteAccountHandler} \r\n              changePasswordHandler={changePasswordHandler} \r\n              changePasswordMessage={changePasswordMessage}\r\n            />\r\n          }\r\n        </div>\r\n      )\r\n    }\r\n\treturn (\r\n    <div className=\"landingPage\">\r\n       {leftMenu()}\r\n      {containerBody()}\r\n    </div>\r\n\t)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      screenType: state.userStore.screenType\r\n    };\r\n  }\r\n\r\n  export default connect((mapStateToProps),{\r\n      changeScreenType,\r\n  })(LandingPage);","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\userLoginForm.tsx",["78"],"import React, {useState,useEffect} from 'react'\r\nimport 'components/useraccount/style/userLoginForm.scss';\r\nimport Translation from 'language/LanguageModel';\r\nimport { emailValidationPattern,EMPTY, INVALID_EMAIL, USERNAME_PASSWORD_NOT_FILLED } from 'common/constants';\r\n\r\ninterface Props {\r\n  viewModel:Translation,\r\n  loginClickHandler,\r\n  displayCreateAccountHandler,\r\n  loading:boolean,\r\n  message:string\r\n}\r\n\r\nconst UserLoginForm=(props:Props)=>{\r\n      \r\n  const [username,setUsername] = useState(EMPTY);\r\n  const [password,setPassword] = useState(EMPTY);\r\n  const [validationPass,setValidationPass] = useState(false);\r\n  const [checkError,setcheckError] = useState(false);\r\n  const [displayError,setDisplayError] = useState(EMPTY);\r\n  \r\n  useEffect(() => {\r\n      if (username===EMPTY || password ===EMPTY || !emailValidationPattern.test(username)){\r\n        setValidationPass(false)  \r\n      }else \r\n        setValidationPass(true)  \r\n      \r\n      //validation failed\r\n      if((!validationPass && checkError)){ \r\n        if(!emailValidationPattern.test(username)){\r\n          setDisplayError(INVALID_EMAIL)  \r\n        }else\r\n          setDisplayError(USERNAME_PASSWORD_NOT_FILLED)\r\n      }else {\r\n        setDisplayError(EMPTY)\r\n      }\r\n      \r\n  }, [username ,password]);\r\n\r\n  useEffect(() => {\r\n    setDisplayError(props.message)\r\n  }, [props.message]);\r\n\r\n  const loginClick =()=>{\r\n    if(username && password && validationPass){\r\n          props.loginClickHandler(username,password)\r\n    }else \r\n      setcheckError(true)\r\n  }\r\n\r\n  return (\r\n      <div className=\"user-login-form\">\r\n          <div className=\"title each-element\">{props.viewModel.FANCY_APP}</div>\r\n          <label className=\"email-label each-element\">{props.viewModel.EMAIL}</label>\r\n          \r\n          <input required \r\n            className=\"input-email each-element\" \r\n            placeholder=\"user@example.com\" \r\n            onChange={event=>{\r\n              event && setUsername(event.target.value);\r\n              setcheckError(true)\r\n            }}\r\n          />\r\n          <label className=\"password-label each-element\" >{props.viewModel.PASSWORD}</label>\r\n          <input required \r\n            className=\"input-password each-element\"\r\n            type=\"password\" \r\n            placeholder=\"*********\" \r\n            onChange={event=>{\r\n              event && setPassword(event.target.value);\r\n              setcheckError(true)\r\n            }}\r\n          />\r\n          <div className=\"validation-message\">\r\n            {displayError}\r\n          </div>\r\n          <button  \r\n            className=\"login-btn btn active-btn each-element\" onClick={loginClick}>\r\n              {props.loading ? <i className=\"fa fa-spinner fa-spin\"></i>:props.viewModel.LOGIN}\r\n          </button>\r\n          <button className=\"new-account-btn btn each-element\" onClick={props.displayCreateAccountHandler}>\r\n          {props.viewModel.CREATE_NEW_ACCOUNT}\r\n          </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default UserLoginForm","C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\createAccount.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\changeLanguageForm.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\components\\useraccount\\securityModification.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\security\\inMemoryJWTManager.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\common\\constants.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\util\\HttpUtil.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\language\\LanguageModel.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\security\\cookieHelper.tsx",[],"C:\\Sourabh\\Workspace\\React\\Experiments\\WSP_7\\fancy-app-challenge\\src\\service\\Service.tsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":11,"column":19,"nodeType":"85","messageId":"86","endLine":11,"endColumn":30},{"ruleId":"83","severity":1,"message":"87","line":13,"column":11,"nodeType":"85","messageId":"86","endLine":13,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":52,"column":6,"nodeType":"90","endLine":52,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":38,"column":6,"nodeType":"90","endLine":38,"endColumn":26,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'setMenuShow' is assigned a value but never used.","Identifier","unusedVar","'counter' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'language', 'loadLanguage', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["96"],"React Hook useEffect has missing dependencies: 'checkError' and 'validationPass'. Either include them or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [language, loadLanguage, props]",{"range":"102","text":"103"},"Update the dependencies array to be: [username, password, validationPass, checkError]",{"range":"104","text":"105"},[2122,2124],"[language, loadLanguage, props]",[1260,1280],"[username, password, validationPass, checkError]"]